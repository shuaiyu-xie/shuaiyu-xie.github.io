<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>衍射的博客</title>
  <icon>https://www.gravatar.com/avatar/7c43a0c362da2f0813fcc4041b060448</icon>
  <subtitle>记录学习中的点点滴滴</subtitle>
  <link href="https://shuaiyuxie.github.io/atom.xml" rel="self"/>
  
  <link href="https://shuaiyuxie.github.io/"/>
  <updated>2024-11-25T07:48:44.636Z</updated>
  <id>https://shuaiyuxie.github.io/</id>
  
  <author>
    <name>谢帅宇</name>
    <email>shuaiyuxie@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前缀树（Prefix Tree）</title>
    <link href="https://shuaiyuxie.github.io/2024/11/25/trie_tree/"/>
    <id>https://shuaiyuxie.github.io/2024/11/25/trie_tree/</id>
    <published>2024-11-25T03:35:01.000Z</published>
    <updated>2024-11-25T07:48:44.636Z</updated>
    
    <content type="html"><![CDATA[<p>Trie 树，又叫前缀树，字典树， 是一种有序的树形数据结构，用于高效地存储和检索字符串数据集中的键。下图是维基百科上关于trie树的一个典型例子，我们可以很清晰地看到，这棵树存储了许多前缀相似的字符串，给定一个字符串，我们可以很容易知道这个字符串是否被存储，而不需要遍历比较。</p><center>   <img src="/imgs/trie/trie.png"/>  </center><p>这一数据结构有相当多的应用情景，例如：</p><ul><li>自动补全：<ul><li>搜索提示：输入网址，跳出可能的选择</li><li>输入提示：根据已经输入的字符预测可能的词组和句子</li></ul></li><li>拼写检查：存储合法的单词列表，快速查找是否存在合法的单词</li><li>前缀匹配</li><li>IP路由查找</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>leetcode 208 实现Trie（前缀树）</p><blockquote><p>请你实现 Trie 类：</p><ul><li><code>Trie()</code> 初始化前缀树对象。</li><li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li><li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li><li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul></blockquote><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]</span><br><span class="line">[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]</span><br><span class="line">输出</span><br><span class="line">[null, null, true, false, true, null, true]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">Trie trie &#x3D; new Trie();</span><br><span class="line">trie.insert(&quot;apple&quot;);</span><br><span class="line">trie.search(&quot;apple&quot;);   &#x2F;&#x2F; 返回 True</span><br><span class="line">trie.search(&quot;app&quot;);     &#x2F;&#x2F; 返回 False</span><br><span class="line">trie.startsWith(&quot;app&quot;); &#x2F;&#x2F; 返回 True</span><br><span class="line">trie.insert(&quot;app&quot;);</span><br><span class="line">trie.search(&quot;app&quot;);     &#x2F;&#x2F; 返回 True</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li><li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li><li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 104</code> 次</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题有几个地方需要注意：</p><ul><li><code>insert</code>时，需要标记单词是否截止，因为trie中的节点既有可能是前缀，也有可能是单词</li><li><code>search</code>与 <code>startswith</code>的区别在于， <code>startswith</code>只需要搜索下去，看看有没有对应的节点；而<code>search</code>还需要判断这个节点是否有截止信号</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cur_node = self.root</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> cur_node.keys():</span><br><span class="line">                cur_node = cur_node[c]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur_node[c]=&#123;&#125;</span><br><span class="line">                cur_node = cur_node[c]</span><br><span class="line">                cur_node[<span class="number">0</span>]=<span class="number">0</span> <span class="comment"># 标记是否截止</span></span><br><span class="line">        <span class="comment"># 标记这个cur_node，标注上截止信号，代表这是一个词</span></span><br><span class="line">        cur_node[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cur_node = self.root</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> cur_node.keys():</span><br><span class="line">                cur_node = cur_node[c]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 判断有没有截止信号</span></span><br><span class="line">        <span class="keyword">if</span> cur_node[<span class="number">0</span>]==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startsWith</span><span class="params">(self, prefix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type prefix: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cur_node = self.root</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> cur_node.keys():</span><br><span class="line">                cur_node = cur_node[c]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">trie = Trie()</span><br><span class="line">trie.insert(<span class="string">"app"</span>)</span><br><span class="line">trie.insert(<span class="string">"apple"</span>)</span><br><span class="line">trie.insert(<span class="string">"beer"</span>)</span><br><span class="line">trie.insert(<span class="string">"add"</span>)</span><br><span class="line">trie.insert(<span class="string">"jam"</span>)</span><br><span class="line">trie.insert(<span class="string">"rental"</span>)</span><br><span class="line">trie.insert(<span class="string">"rental"</span>)</span><br><span class="line">print(trie.search(<span class="string">"apps"</span>))</span><br><span class="line">print(trie.startsWith(<span class="string">"app"</span>))</span><br><span class="line">print(trie.search(<span class="string">"app"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Trie 树，又叫前缀树，字典树， 是一种有序的树形数据结构，用于高效地存储和检索字符串数据集中的键。下图是维基百科上关于trie树的一个典型例子，我们可以很清晰地看到，这棵树存储了许多前缀相似的字符串，给定一个字符串，我们可以很容易知道这个字符串是否被存储，而不需要遍历比</summary>
      
    
    
    
    
    <category term="算法" scheme="https://shuaiyuxie.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="https://shuaiyuxie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>期望最大算法（Expectation Maximization Algorithm）</title>
    <link href="https://shuaiyuxie.github.io/2024/11/20/EM/"/>
    <id>https://shuaiyuxie.github.io/2024/11/20/EM/</id>
    <published>2024-11-20T03:35:01.000Z</published>
    <updated>2024-11-21T06:44:23.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>期望最大化算法（Expectation-Maximization algorithm, EM）是一种在统计学中估计概率模型参数的方法，特别适用于包含隐变量（latent variables）的概率模型。</p><p>如果一个概率模型只有观测变量，那么我们可以<strong>基于观测得到的数据，用最大似然估计求得概率模型的参数</strong>。但是如果概率模型还包含了无法观测的变量（<font color=blue>隐变量</font>），则无法用上述方法估计，所以需要考虑隐变量，引入新的方法对参数进行估计。</p><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><p>假设我们有一组一维数据$X&#x3D;{x_1, x_2,…,x_n}$，我们认为这些数据是由2个正态分布混合而成的。我们的目标是估计这2个正态分布的参数（均值和方差）以及它们各自的权重。参数如下：</p><ul><li>第1个分布 $N(\mu_1, \sigma_1)$，其中$\mu_1&#x3D;5$, $\sigma_1&#x3D;9$</li><li>第2个分布 $N(\mu_2, \sigma_2)$，其中$\mu_2&#x3D;15$, $\sigma_2&#x3D;0.5$</li></ul><p>两个分布的权重满足：$\sum_{k&#x3D;1}^2\pi_k&#x3D;1$</p><p>我们目前手中只有这一组一维观测数据$X&#x3D;{x_1, x_2,…,x_n}$，已知观测数据由2个正态分布组成，目标是求出这2个正态分布的参数以及各自的权重。</p><p>注意，我们不能直接使用观测数据去拟合2个分布，因为观测数据的分布实际上是2个正态分布混合而成，其中包含了一个隐变量：</p>$$    z_i= \begin{cases}        0& x_i \in N(\mu_1, \sigma_1^2)\\        1& x_i \in N(\mu_2, \sigma_2^2)        \end{cases}$$<p>隐变量$z_i$表示数据点$x_i$由哪个分布生成。而隐变量$z_i$的值无法被观测，所以当我们用最大似然估计去做时，需要考虑所有可能的隐变量情况（不同取值的权重）：</p>$$    L(\theta)=\prod_{i=1}^{n}f(x_i;\theta) \\    \begin{aligned}    ln L(\theta) &= \sum_{i=1}^{n}ln f(x_i:\theta) \\    &=  \sum_{i=1}^{n}ln \sum_{k=1}^{2} \pi_k f(x_i:\theta_k)    \end{aligned}$$但由于 $\pi_k$未知，所以难以进行最大似然估计。<h2 id="EM算法步骤"><a href="#EM算法步骤" class="headerlink" title="EM算法步骤"></a>EM算法步骤</h2><p>我们首先用两个正态分布混合生成观测数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">8</span>)</span><br><span class="line">n_samples = ⅓</span><br><span class="line">data = np.concatenate((np.random.normal(<span class="number">5</span>, <span class="number">3</span>, n_samples),</span><br><span class="line">                       np.random.normal(<span class="number">15</span>, <span class="number">0.5</span>, n_samples)))</span><br></pre></td></tr></table></figure><p>并随机给予两个分布初始参数以及权重，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mu1, sigma1 = <span class="number">10</span>, <span class="number">1</span></span><br><span class="line">mu2, sigma2 = <span class="number">20</span>, <span class="number">1</span></span><br><span class="line">pi1, pi2 = <span class="number">0.5</span>, <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">tolerance = <span class="number">1e-6</span></span><br><span class="line">max_iterations = <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>EM算法分为两个步骤：</p><h3 id="E步（期望步-Expectation-step）："><a href="#E步（期望步-Expectation-step）：" class="headerlink" title="E步（期望步, Expectation step）："></a>E步（期望步, Expectation step）：</h3><p>我们需要计算每个数据点 $x_i$ 属于不同分布的后验概率（<font color=blue>本质上是隐变量z的条件期望值</font>），此处可以使用贝叶斯公式计算得到：</p>$$\begin{aligned}P(z_i=1|x_i, \theta)&=\frac{P(x_i|z_i=1)P(z_i=1)}{P(x_i)}=\frac{P(x_i|z_i=1)P(z_i=1)}{P(x_i|z_i=1)P(z_i=1)+P(x_i|z_i=2)P(z_i=2)}\\&=\frac{\pi_1N(x_i|\mu_1, \sigma_1^2)}{\pi_1N(x_i|\mu_1, \sigma_1^2) + \pi_2N(x_i|\mu_2, \sigma_2^2)}\end{aligned}$$<p>同理可以求得$P(z_i&#x3D;2|x_i, \theta)$。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normal_pdf</span><span class="params">(x, mu, sigma)</span>:</span></span><br><span class="line">    <span class="comment"># 计算x_i的概率密度</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> / (np.sqrt(<span class="number">2</span> * np.pi) * sigma)) * np.exp(<span class="number">-0.5</span> * ((x - mu) / sigma) ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> iteration <span class="keyword">in</span> range(max_iterations):</span><br><span class="line">    <span class="comment"># E步：计算后验概率</span></span><br><span class="line">    likelihood1 = normal_pdf(data, mu1, sigma1)</span><br><span class="line">    likelihood2 = normal_pdf(data, mu2, sigma2)</span><br><span class="line">    total_likelihood = pi1 * likelihood1 + pi2 * likelihood2</span><br><span class="line">    posterior1 = (pi1 * likelihood1) / total_likelihood</span><br><span class="line">    posterior2 = (pi2 * likelihood2) / total_likelihood</span><br></pre></td></tr></table></figure><h3 id="M步（最大化步-Maximization-step）："><a href="#M步（最大化步-Maximization-step）：" class="headerlink" title="M步（最大化步, Maximization step）："></a>M步（最大化步, Maximization step）：</h3><p>在E步得到 $x_i$ 属于不同分布的后验概率后，也是隐变量$z_i$的条件期望后，我们利用这个期望来更新参数估计值，以最大化观测数据的似然函数。</p><blockquote><p>因为现在已经知道了关于隐变量z_i的条件期望，所以我们可以用最大似然估计去估计各分布的参数了：</p></blockquote><p>$$<br>    \mu_k&#x3D;\mathop{\arg\max}\limits_{\mu_k}{\sum_{i&#x3D;1}^{n}P(z_i&#x3D;k|x_i, \theta)}lnf(x_i;\mu_k,\sigma_k^2)<br>$$</p><p>$$<br>    \sigma_k^2&#x3D;\mathop{\arg\max}\limits_{\sigma_k^2}{\sum_{i&#x3D;1}^{n}P(z_i&#x3D;k|x_i, \theta)}lnf(x_i;\mu_k,\sigma_k^2)<br>$$</p><p>对上述两式进行求解可得各部分更新公式如下（$\pi_k$更新同理）：<br>$$<br>    \mu_k &#x3D; \frac{\sum_{i&#x3D;1}^{n}P(z_i&#x3D;k|x_i,\theta)x_i}{\sum_{i&#x3D;1}^{n}P(z_i&#x3D;k|x_i,\theta)}<br>$$</p><p>$$<br>    \sigma_k^2 &#x3D; \frac{\sum_{i&#x3D;1}^{n}P(z_i&#x3D;k|x_i, \theta)(x_i-\mu_k)^2}{\sum_{i&#x3D;1}^{n}P(z_i&#x3D;k|x_i,\theta)}<br>$$</p><p>$$<br>    \pi_k&#x3D;\frac{1}{n}\sum_{i&#x3D;1}^{n}P(z_i&#x3D;k|x_i,\theta)<br>$$</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># M步: 更新参数</span></span><br><span class="line">pi1_new = np.mean(posterior1)</span><br><span class="line">pi2_new = np.mean(posterior2)</span><br><span class="line">mu1_new = np.sum(posterior1 * data) / np.sum(posterior1)</span><br><span class="line">mu2_new = np.sum(posterior2 * data) / np.sum(posterior2)</span><br><span class="line">sigma1_new = np.sqrt(np.sum(posterior1 * (data - mu1_new) ** <span class="number">2</span>) / np.sum(posterior1))</span><br><span class="line">sigma2_new = np.sqrt(np.sum(posterior2 * (data - mu2_new) ** <span class="number">2</span>) / np.sum(posterior2))</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line">np.random.seed(<span class="number">8</span>)</span><br><span class="line">n_samples = <span class="number">100</span></span><br><span class="line">data = np.concatenate((np.random.normal(<span class="number">5</span>, <span class="number">3</span>, n_samples // <span class="number">2</span>),</span><br><span class="line">                       np.random.normal(<span class="number">15</span>, <span class="number">0.5</span>, n_samples // <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化参数</span></span><br><span class="line">mu1, sigma1 = <span class="number">10</span>, <span class="number">1</span></span><br><span class="line">mu2, sigma2 = <span class="number">20</span>, <span class="number">1</span></span><br><span class="line">pi1, pi2 = <span class="number">0.5</span>, <span class="number">0.5</span></span><br><span class="line">tolerance = <span class="number">1e-6</span></span><br><span class="line">max_iterations = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normal_pdf</span><span class="params">(x, mu, sigma)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> / (np.sqrt(<span class="number">2</span> * np.pi) * sigma)) * np.exp(<span class="number">-0.5</span> * ((x - mu) / sigma) ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> iteration <span class="keyword">in</span> range(max_iterations):</span><br><span class="line">    <span class="comment"># E步: 计算后验概率</span></span><br><span class="line">    likelihood1 = normal_pdf(data, mu1, sigma1)</span><br><span class="line">    likelihood2 = normal_pdf(data, mu2, sigma2)</span><br><span class="line">    total_likelihood = pi1 * likelihood1 + pi2 * likelihood2</span><br><span class="line">    posterior1 = (pi1 * likelihood1) / total_likelihood</span><br><span class="line">    posterior2 = (pi2 * likelihood2) / total_likelihood</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># M步: 更新参数</span></span><br><span class="line">    pi1_new = np.mean(posterior1)</span><br><span class="line">    pi2_new = np.mean(posterior2)</span><br><span class="line">    mu1_new = np.sum(posterior1 * data) / np.sum(posterior1)</span><br><span class="line">    mu2_new = np.sum(posterior2 * data) / np.sum(posterior2)</span><br><span class="line">    sigma1_new = np.sqrt(np.sum(posterior1 * (data - mu1_new) ** <span class="number">2</span>) / np.sum(posterior1))</span><br><span class="line">    sigma2_new = np.sqrt(np.sum(posterior2 * (data - mu2_new) ** <span class="number">2</span>) / np.sum(posterior2))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查是否收敛</span></span><br><span class="line">    <span class="keyword">if</span> (abs(mu1_new - mu1) &lt; tolerance <span class="keyword">and</span></span><br><span class="line">        abs(mu2_new - mu2) &lt; tolerance <span class="keyword">and</span></span><br><span class="line">        abs(sigma1_new - sigma1) &lt; tolerance <span class="keyword">and</span></span><br><span class="line">        abs(sigma2_new - sigma2) &lt; tolerance):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    mu1, mu2, sigma1, sigma2, pi1, pi2 = mu1_new, mu2_new, sigma1_new, sigma2_new, pi1_new, pi2_new</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印最终结果</span></span><br><span class="line">print(<span class="string">f"迭代次数: <span class="subst">&#123;iteration&#125;</span>"</span>)</span><br><span class="line">print(<span class="string">f"μ1: <span class="subst">&#123;mu1&#125;</span>, σ1: <span class="subst">&#123;sigma1&#125;</span>, π1: <span class="subst">&#123;pi1&#125;</span>"</span>)</span><br><span class="line">print(<span class="string">f"μ2: <span class="subst">&#123;mu2&#125;</span>, σ2: <span class="subst">&#123;sigma2&#125;</span>, π2: <span class="subst">&#123;pi2&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制结果</span></span><br><span class="line">plt.hist(data, bins=<span class="number">30</span>, density=<span class="literal">True</span>, alpha=<span class="number">0.6</span>, color=<span class="string">'g'</span>)</span><br><span class="line">x = np.linspace(min(data), max(data), <span class="number">100</span>)</span><br><span class="line">plt.plot(x, pi1 * normal_pdf(x, mu1, sigma1), <span class="string">'r-'</span>, lw=<span class="number">2</span>, label=<span class="string">f'N(<span class="subst">&#123;mu1:<span class="number">.2</span>f&#125;</span>, <span class="subst">&#123;sigma1:<span class="number">.2</span>f&#125;</span>)'</span>)</span><br><span class="line">plt.plot(x, pi2 * normal_pdf(x, mu2, sigma2), <span class="string">'b-'</span>, lw=<span class="number">2</span>, label=<span class="string">f'N(<span class="subst">&#123;mu2:<span class="number">.2</span>f&#125;</span>, <span class="subst">&#123;sigma2:<span class="number">.2</span>f&#125;</span>)'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>结果输出如下：</p><center>   <img src="/imgs/EM/EM.png"/>   </center>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;期望最大化算法（Expectation-Maximization algorithm, EM）是一种在统计学中估计概率模型参数的方法，特别适</summary>
      
    
    
    
    
    <category term="算法" scheme="https://shuaiyuxie.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="概率论" scheme="https://shuaiyuxie.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>最长公共子序列（Longest Common Subsequence）</title>
    <link href="https://shuaiyuxie.github.io/2024/11/20/LCS/"/>
    <id>https://shuaiyuxie.github.io/2024/11/20/LCS/</id>
    <published>2024-11-20T03:35:01.000Z</published>
    <updated>2024-11-25T06:30:19.331Z</updated>
    
    <content type="html"><![CDATA[<p> 最长公共子序列（LCS）是一个在一个序列集合中用来查找所有序列中最长子序列的问题。这与查找最长公共子串的问题不同的地方是：<strong>子序列不需要在原序列中占用连续的位置。而最长公共子串（要求连续）和最长公共子序列是不同的。</strong></p><p>比如：字符串 A<font color=red>BC</font>BD<font color=red>AB</font> 和 字符串 <font color=red>B</font>D<font color=red>CAB</font> 的LCS为 <font color=red>BCAB</font>。</p><blockquote><p>LCS在计算机领域有诸多应用，比如可以：</p><ul><li>比较 DNA 序列或蛋白质序列。</li><li>比较不同版本的文件，找出更改的部分</li><li>文本（代码）相似性检</li><li>…</li></ul><p>假设有两个版本的文件：</p><ul><li>文件 V1: The quick brown fox jumps over the lazy dog.</li><li>文件 V2: A quick brown dog jumps over the lazy cat.</li></ul><p>通过 LCS 算法，可以找到它们的最长公共子序列为 quick brown jumps over the lazy，剩余的部分为更改，这有助于生成补丁文件和合并冲突。</p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>leetcode 1143 是最长公共子序列的经典问题：</p><blockquote><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。</p><p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><ul><li>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。<br>两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</li></ul><p>两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</p></blockquote><p>示例 1：</p><p>输入：text1 &#x3D; “abcde”, text2 &#x3D; “ace”<br>输出：3<br>解释：最长公共子序列是 “ace” ，它的长度为 3 。</p><p>示例 2：</p><p>输入：text1 &#x3D; “abc”, text2 &#x3D; “abc”<br>输出：3<br>解释：最长公共子序列是 “abc” ，它的长度为 3 。</p><p>示例 3：</p><p>输入：text1 &#x3D; “abc”, text2 &#x3D; “def”<br>输出：0<br>解释：两个字符串没有公共子序列，返回 0 。</p><p>提示：</p><ul><li>1 &lt;&#x3D; text1.length, text2.length &lt;&#x3D; 1000</li><li>text1 和 text2 仅由小写英文字符组成。</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>最长公共子序列（Longest Common Subsequence, LCS）问题非常适合使用动态规划来解决，原因在于它具备了动态规划的两个关键特性：<font color=red>最优子结构</font>和<font color=red>重叠子问题</font>。</p><ol><li><p><strong>最优子结构</strong>：LCS问题的最优解可以由其子问题的最优解构建而来。具体来说：</p><ul><li>如果两个序列的最后一个字符相同，那么这个字符必定是LCS的一部分，接下来的问题就转化为了求这两个序列去掉最后一个字符之后的LCS。即 $LCS(i, j) &#x3D; LCS(i-1, j-1) + 1$</li><li>如果两个序列的最后一个字符不同，则LCS不会同时包含这两个字符，问题转化为求一个序列去掉最后一个字符之后与另一个序列的LCS。即 $LCS(i, j) &#x3D; max(LCS(i-1, j), LCS(i, j-1))$</li></ul><p> 这种性质允许我们将大问题分解为更小的子问题，通过解决这些子问题来构建原始问题的解。</p></li><li><p><strong>重叠子问题</strong>：在求解 LCS 的过程中，我们会反复遇到相同的子问题。例如，在计算两个序列 $X$ 和 $Y$ 的LCS时，可能会多次计算 $X$ 的前 $i$ 个字符和 $Y$ 的前 $j$ 个字符的LCS。由于这些子问题会被多次求解，我们可以将它们的结果存储起来，避免重复计算，这就是动态规划中所谓的“记忆化”。</p></li></ol><h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><p>动态规划的求解步骤如下：</p><ol><li><p>定义状态</p><ul><li>在最长公共子序列（LCS）问题中，状态可以用一个二维数组 $dp$ 表示，其中 $dp[i][j]$ 表示序列 $X$ 的前 $i$ 个字符和序列 $Y$ 的前 $j$ 个字符的最长公共子序列的长度。</li></ul></li><li><p>状态转移方程</p><ul><li><p>在上节最优子结构的判断中，已经定义出了状态转移方程：</p><ul><li>if $X[i]&#x3D;&#x3D;Y[j]$， $dp[i][j] &#x3D; dp[i-1][j-1] + 1$</li><li>if  $X[i]!&#x3D;Y[j]$， $dp[i][j] &#x3D; max(dp[i-1][j], dp[i][j-1])$</li></ul></li></ul></li></ol><p>python代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonSubsequence</span><span class="params">(self, text1, text2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type text1: str</span></span><br><span class="line"><span class="string">        :type text2: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        n, m = len(text1), len(text2)</span><br><span class="line">        <span class="comment"># 多声明一行一列，方便计算dp[1][1]</span></span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(m+<span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> text1[i<span class="number">-1</span>] == text2[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = max(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[n][m]</span><br></pre></td></tr></table></figure><p>最终的$dp$表为：</p><p>[0, 0, 0, 0]</p><p>[0, 1, 1, 1]</p><p>[0, 1, 1, 1]</p><p>[0, 1, 2, 2]</p><p>[0, 1, 2, 2]</p><p>[0, 1, 2, 3]</p><h2 id="扩充"><a href="#扩充" class="headerlink" title="扩充"></a>扩充</h2><p>如果题目要求我们求出具体的最长公共子序列呢？我们可以根据$dp$表进行回溯，思路为</p><ol><li>从$dp[n][m]$开始向前回溯</li><li>如果当前$X[i]&#x3D;&#x3D;Y[j]$，那么说明此时$X[i]$（$Y[j]$）属于LCS的一部分，则加入LCS；同时$X$和$Y$都向前推进一位</li><li>如果当前$X[i]!&#x3D;Y[j]$，那么我们需要找出LCS是在$X[i-1]$和$Y[j]$中产生，还是在$X[i]$和$Y[j-1]$中产生，则只需要对比$dp[i-1][j]$ 和 $dp[i][j-1]$</li></ol><p>所以代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonSubsequence</span><span class="params">(self, text1, text2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type text1: str</span></span><br><span class="line"><span class="string">        :type text2: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        n, m = len(text1), len(text2)</span><br><span class="line">        <span class="comment"># 多声明一行一列，方便计算dp[1][1]</span></span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(m+<span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> text1[i<span class="number">-1</span>] == text2[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = max(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># 回溯</span></span><br><span class="line">        i, j = n, m</span><br><span class="line">        lcs = []</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">if</span> text1[i<span class="number">-1</span>]==text2[j<span class="number">-1</span>]:</span><br><span class="line">                lcs.append(text1[i<span class="number">-1</span>])</span><br><span class="line">                i-=<span class="number">1</span></span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> dp[i<span class="number">-1</span>][j] &gt; dp[i][j<span class="number">-1</span>]:</span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    j-=<span class="number">1</span></span><br><span class="line">        lcs_str = <span class="string">''</span>.join(lcs)[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n][m], lcs_str</span><br><span class="line"></span><br><span class="line">solution = Solution()</span><br><span class="line">lcs_len, lcs = solution.longestCommonSubsequence(<span class="string">'abcde'</span>, <span class="string">'ace'</span>)</span><br><span class="line">print(lcs_len, lcs)</span><br></pre></td></tr></table></figure><p>回溯路径为：</p><p>[0, 0, 0, 0]</p><p>[0, <font color=blue>1</font>, 1, 1]</p><p>[0, <font color=blue>1</font>, 1, 1]</p><p>[0, 1, <font color=blue>2</font>, 2]</p><p>[0, 1, <font color=blue>2</font>, 2]</p><p>[0, 1, 2, <font color=blue>3</font>]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 最长公共子序列（LCS）是一个在一个序列集合中用来查找所有序列中最长子序列的问题。这与查找最长公共子串的问题不同的地方是：&lt;strong&gt;子序列不需要在原序列中占用连续的位置。而最长公共子串（要求连续）和最长公共子序列是不同的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如：字符</summary>
      
    
    
    
    
    <category term="算法" scheme="https://shuaiyuxie.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://shuaiyuxie.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>[FSE 2024] TraStrainer: Adaptive Sampling for Distributed Traces with System Runtime State</title>
    <link href="https://shuaiyuxie.github.io/2024/06/23/TraStrainer/"/>
    <id>https://shuaiyuxie.github.io/2024/06/23/TraStrainer/</id>
    <published>2024-06-23T07:42:10.000Z</published>
    <updated>2024-11-21T06:46:10.246Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目：TraStrainer: Adaptive Sampling for Distributed Traces with System Runtime State</p><p>来源：FSE 2024</p><p>作者：中山大学DDS实验室</p></blockquote><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>微服务系统每天都会产生大量的trace数据，带来了极大的计算和存储成本。trace sampling 技术被用来缓解这种压力。trace sampling 分为两种：</p><ul><li><code>random sampling</code>：又称 head sampling，即以固定概率决定每条trace是否采样</li><li><code>biased sampling</code>：又称 tail sampling，即根据trace的状态决定是否采样</li></ul><p>很明显，<code>random sampling</code> 实现起来简单，但无法保证得到高质量的采样数据；<code>biased sampling</code> 能够根据用户偏好进行采样（比如高延时、异常状态码）。</p><p>先前的 <code>biased sampling</code> 工作大多基于密度（diversity），即偏好采样那些少见（edge-case）的traces，常见（common-case）的traces则少采样一些。然而，作者认为仅根据trace的状态进行采样是不充分的，应该再考虑<font color=blue>当前系统运行状态（system runtime state）</font>，特别是系统处在故障状态时。（<em>作者很有想法，在trace采样中玩了多模态，引入了metric，我觉得陈鹏飞老师实验室的工作还是很扎实且新颖的</em>）</p><center><img src="/imgs/TraStrainer/trace-metric.png"/></center><p>本文提出了TraStrainer，从以下角度进行在线采样：</p><ul><li>考虑密度：采用一种可解释的编码方式将trace转化为向量，方便后续密度采样</li><li>考虑系统状态：结合当前系统各种运行指标生成偏好向量，方便后续系统采样</li><li>密度采样+系统采样 $\to$ 最终采样决策</li></ul><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>陈鹏飞老师实验室有大量关于<strong>微服务系统的故障诊断</strong>的工作，其中有许多是基于trace进行分析的，比如<code>MicroRank</code>，<code>TraceRank</code>和<code>MicroSketch</code>。</p><p>trace采样是这些工作的上游任务，先前与<code>biased sampling</code>相关的工作都是基于密度的，目标是采样edge-case traces，没有考虑过采样的traces对下游故障诊断工作的影响。作者从以下两点进行了分析：</p><ol><li><p><strong>仅考虑edge-case traces是不够的</strong>。作者在此举例说明 common-case traces也有很大的用处:</p><ul><li><strong>common-case traces 可能与根因有关</strong>。比如线程池因为太多请求的到来而用尽，而这些与根因相关的请求的traces并不一定是异常的，也就被认定为common-case traces。而我们分析这些common-case traces，可以发现这个时刻有高峰流量（这个是我根据自己理解加的）。</li><li><strong>common-case traces 有利于下游的分析任务</strong>。很多工作比如TraceRCA，T-Rank，都需要common-case traces来获得系统的正常模式，从而与故障时刻进行比对。</li></ul></li><li><p><strong>结合 system runtime state 有利于判断有价值的trace</strong>。作者拿了华为的一个真实场景进行分析，如Fig. 3所示，[a,b]时间段 Node A 的 MySQL服务进行全表查询，导致 Node A 的CPU被打满，到达 Node A 的请求变得异常。SREs通常先检查系统状态，发现CPU升高，然后分析经过 Node A 的traces。<font color=red>然而，如果只根据密度进行trace采样，那么[a,b]的traces将被采集的很少，因为还没有发生异常</font>。<font color=green>如果结合系统状态进行采样，那么[a,b]的traces将给予更高的采样权重（[a,b]存在CPU攀升）。</font></p></li></ol><center><img src="/imgs/TraStrainer/metric-importance.png"/></center><p>综上，作者认为应该在trace采样时不仅仅考虑traces之间的密度，也要引入对当前系统状态的考虑。</p><h2 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h2><p>给定一段时间收集的traces $\mathcal{T}$、对应的系统状态指标 $\mathcal{M}$、采样率 $\beta$，需要对$\mathcal{T}$中每个trace $t$ 计算采样概率 $\rho$。整个过程定义为：</p><p>$$<br>   S_p(\beta, \mathcal{T}, \mathcal{M}, t) \to \rho, \mathcal{T’}<br>$$</p><p>其中，$\mathcal{T’}$是$\mathcal{T}$的采样子集。</p><h2 id="TraStrainer-概要"><a href="#TraStrainer-概要" class="headerlink" title="TraStrainer 概要"></a>TraStrainer 概要</h2><center><img src="/imgs/TraStrainer/TraStrainer.png"/></center><p>TraStrainer的架构和其他在线采样器相似，包含以下模块：</p><ul><li><p><strong>Runtime Data Preprocessing</strong>：</p><ul><li>Trace Encoder：对trace进行结构和状态编码</li><li>System Bias Extractor：将当前系统状态指标进行编码</li></ul></li><li><p><strong>Comprehensive Sampling</strong>：</p><ul><li>System-Biased Sampler：优先采样与当前系统波动最相似的trace</li><li>Diversity-Biased Sampler：优先采样edge cases traces</li><li>Composite Sampler：结合上述两种采样器进行最终决策</li></ul></li></ul><h3 id="Trace-Encoder"><a href="#Trace-Encoder" class="headerlink" title="Trace Encoder"></a>Trace Encoder</h3><p>如Fig.5所示，trace的编码包含<strong>结构编码</strong>和<strong>状态编码</strong>两部分：</p><center><img src="/imgs/TraStrainer/encoder-example.png"/></center><p><strong>状态编码</strong>：结合 Fig. 5 的例子进行说明，Fig. 5 的Trace Vector的上半部分展示了由指标（node，metric_name）构成的向量，比如指标$m_1$就是（$C$, $SQLConnectionTime$）。一条trace由各种span构成，文章的span携带了一些tag（比如Node和annotation）。为了计算$m_1$的值$f_{m_1}$，作者将所有与$m_1$相关的span的duration结合起来，具体计算如下：</p><p>$$<br>   f_{m_1}&#x3D;(|S_a|+1)*\sum_{i&#x3D;1}^{n}s_{m_1i}.duration<br>$$</p><p>$s_{m_1i}$即与指标$m_1$相关的span，而$|S_a|$即相关span中异常span的个数（状态码为error，Fig.5中为1）</p><blockquote><p>注：最开始不太理解这种设计，后来发现是作者将指标与对应的trace的状态信息（延时+状态码）联系起来，相当于量化了指标对trace状态的影响，非常巧妙。</p></blockquote><p><strong>结构编码</strong>：这一块比较简单，即将trace看做一棵树，每层可能有多个span，这些spans由<code>parentSpan</code>、<code>method</code>以及<code>params</code>组成，每一层的spans都被编码为一个特征。这些特征共同组成一个vector。</p><h3 id="System-Bias-Extractor"><a href="#System-Bias-Extractor" class="headerlink" title="System Bias Extractor"></a>System Bias Extractor</h3><p>这一部分的本质是衡量当前系统哪个指标比较重要，这个重要程度由指标的<strong>异常程度</strong>决定。每个指标的异常程度组合成一个一维的<code>preference vector</code>数组，</p><center><img src="/imgs/TraStrainer/metric-anomaly.png"/></center><p>作者认为基于统计模型的异常检测不准确，无法识别周期性；而基于LSTM和Transformer的深度学习模型在响应太慢，无法适应线上采样。所以最终采用<code>DLinear algorithm</code><a href="#DLinear"><sup>1</sup></a>，如Fig.6所示，这个算法通过指标的历史时序数据预测当前值$v_k’$，并通过以下公式计算指标异常程度：<br>$$<br>   \alpha&#x3D;\frac{v_k’-v_k}{max(v_k’, v_k)}<br>$$</p><p>这个公式通过预测值与真实值的差距计算异常度。所有指标$\mathcal{M}$的异常度拼在一起就是<code>preference vector</code> $\mathcal{P}$。</p><h3 id="System-Biased-Sampler"><a href="#System-Biased-Sampler" class="headerlink" title="System-Biased Sampler"></a>System-Biased Sampler</h3><p>System-Biased Sampler的核心是优先考虑与当前系统指标波动最相似的traces（与motivation中的故障诊断对上）。那么需要对新到来的trace进行注意力评估和采样概率计算。</p><p>本文定义了一个固定长度look-back window，由$k$条最近收集的历史traces组成：$[t_1,…,t_k]$。System-Biased Sampler只需用到trace的状态编码部分，每条trace的状态向量由n个指标组成，表示为$t_i&#x3D;[f_{1i},…,f_{ni}]$。对历史traces每一维指标计算均值$\mu_i$和标准差$\sigma_i$，则对新到来的trace $t_{k+1}$ 的第$i$个指标注意力分数计算如下：<br>$$<br>   a_i &#x3D; \frac{|f_{ik+1}-\mu_i|}{\sigma_i}<br>$$</p><p>$t_{k+1}$的所有指标的注意力分数记为 $\mathcal{A}&#x3D;[a_1,…,a_n]$，TraStrainer通过将注意力分数$\mathcal{A}$和<code>preference vector</code> $\mathcal{P}$ 进行点积得到面向系统的采样概率$p_s$：<br>$$<br>   p_s(t_{k+1})&#x3D; \frac{2}{1+e^{-2\mathcal{P·\mathcal{A}(t_{k+1})}}}-1<br>$$ </p><p>以上操作是将点积$P·\mathcal{A}(t_{k+1})$通过tanh函数映射到[0,1]范围，点积越大，代表当前trace与当前系统状态越相似，面向系统的采样概率越大。</p><h3 id="Diversity-Biased-Sampler"><a href="#Diversity-Biased-Sampler" class="headerlink" title="Diversity-Biased Sampler"></a>Diversity-Biased Sampler</h3><p>Diversity-Biased Sampler的目标是考虑edge-case traces（即少见的traces），这篇文章与先前工作一样基于聚类来筛选edge-case traces。</p><p>论文将look-back window的历史traces进行聚类（基于trace的特征），并计算每个类的质量（traces数量），并把新trace $t_{k+1}$ 归于最近的类 $c_{k+1}’$。$c_{k+1}’$的质量为$ma_{k+1}’$，计算 trace $t_{k+1}$ 和 所属类$c_{k+1}’$ 之间的Jaccard相似度$si(t_{k+1})$。</p><p><strong>一般来说，所属类$c_{k+1}’$的质量和$si(t_{k+1})$越小，代表所属类越稀有、新trace越独特，应该给予更高的采样概率</strong>。所以面向密度的采样概率$p_d(t_{k+1})$计算如下：<br>$$<br>   p_d(t_{k+1})&#x3D;\frac{\frac{1}{ma_{k+1}’*si(t_{k+1})}}{\sum_{i&#x3D;1}^{k+1}\frac{1}{ma_{i}’*si(t_{i})}}<br>$$</p><h3 id="Composite-Sampler"><a href="#Composite-Sampler" class="headerlink" title="Composite Sampler"></a>Composite Sampler</h3><p>对于新到trace $t$，综合两个采样概率 $p_s(t)$ 和 $p_d(t)$ 后，考虑采样额度 $\beta$，基于动态投票机制（dynamic voting mechanism）最终决策。</p><center><img src="/imgs/TraStrainer/vote.png"/></center><p>首先统计过去look-back window里采样概率 $\theta$，如果：</p><ul><li>$\theta \geq \beta$，必须两个采样决策都为True，才采样</li><li>$\theta \leq \beta$，只需要有一个采样决策为True，即可采样</li></ul><div><a name="DLinear"></a>[1] Ailing Zeng, Muxi Chen, Lei Zhang, and Qiang Xu. 2023. Are transformers effective for time series forecasting?. In  Proceedings of the AAAI conference on artificial intelligence, Vol. 37. 11121–11128.</div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;题目：TraStrainer: Adaptive Sampling for Distributed Traces with System Runtime State&lt;/p&gt;
&lt;p&gt;来源：FSE 2024&lt;/p&gt;
&lt;p&gt;作者：中山大学DDS实验室&lt;/</summary>
      
    
    
    
    <category term="文献精读" scheme="https://shuaiyuxie.github.io/categories/%E6%96%87%E7%8C%AE%E7%B2%BE%E8%AF%BB/"/>
    
    
    <category term="微服务" scheme="https://shuaiyuxie.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="trace" scheme="https://shuaiyuxie.github.io/tags/trace/"/>
    
    <category term="trace采样" scheme="https://shuaiyuxie.github.io/tags/trace%E9%87%87%E6%A0%B7/"/>
    
    <category term="FSE" scheme="https://shuaiyuxie.github.io/tags/FSE/"/>
    
  </entry>
  
  <entry>
    <title>[TSC 2024] Diagnosing Performance Issues for Large-Scale  Microservice Systems with Heterogeneous Graph</title>
    <link href="https://shuaiyuxie.github.io/2024/06/22/MicroDig/"/>
    <id>https://shuaiyuxie.github.io/2024/06/22/MicroDig/</id>
    <published>2024-06-22T04:21:27.000Z</published>
    <updated>2024-11-21T06:45:34.038Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目：Diagnosing Performance Issues for Large-Scale  Microservice Systems with Heterogeneous Graph</p><p>来源：TSC 2024</p><p>作者：南开大学AIOps@NKU团队，清华大学Netman实验室</p></blockquote><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>微服务系统的可用性对于业务运营和企业声誉至关重要。然而，微服务系统的动态性和复杂性给大规模微服务系统的性能问题诊断带来了重大挑战。文章分析了腾讯性能故障的真实案例后，发现故障传播的<font color=red>因果关系</font>与服务之间的<font color=red>调用关系</font>不一致，所以之前基于调用关系的根因定位方法准确率不高。文章提出适用于大规模微服务系统的性能问题诊断方法，MicroDig，步骤如下：</p><ul><li>基于调用和微服务之间的因果关系构建异构传播图</li><li>采样面向异构的随机游走算法进行根因服务定位</li></ul><p>MicroDig在腾讯、Train-Ticket、银行三个数据集上能实现至少85%的top-3 accuracy。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着微服务系统的快速演变和规模扩张，微服务自身固有的动态性和复杂性给系统的可靠性维护带来了挑战。当微服务系统发生性能异常时，需要及时定位到根因服务，并把问题工单发给对应微服务的团队。然而，由于微服务数量太过庞大（Alibaba有超过30000服务），并且服务之间交互复杂，性能异常在服务之间进行传播，导致大量服务同时异常，进而使得人工诊断变得耗时耗力。</p><p>有许多现有工作基于trace来进行根因分析。trace记录了每次请求的调用路径以及相关性能表现，然而，<font color=red>海量的traces会带来极大的存储开销</font>（eBay每天产生150 billion的traces）。所以，越来越多的公司只保留两个服务之间的端到端聚合调用（end-to-end aggregated calls）。</p><p>有些工作已经使用了aggregated call（这里指的是Codewisdom团队的GMTA<a href="#GMTA"><sup>1</sup></a>），采取模式匹配的方式进行根因定位，但需要非常充足的历史故障数据，这在现实场景中很难实现；也有一些工作基于因果图进行根因定位，他们的因果挖掘算法有极高的计算成本，并且准确率较低。</p><p>注：aggregated call在GMTA中提到过，应该就是一段时间（比如1 min）内trace的聚合：</p><center>   <img src="/imgs/MicroDig/GMTA-path.png"/>   </center><p>文章提出的MicroDig的核心思想是：调用关系不等于因果关系（在动机中有具体说明），于是在故障诊断前先构造因果图（节点是微服务和调用）。<br>【从相关工作的分析到方法的提出有点衔接生硬，可能是因为因果方面的分析放到了动机的原因】</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><h3 id="调用关系≠异常传播的因果关系"><a href="#调用关系≠异常传播的因果关系" class="headerlink" title="调用关系≠异常传播的因果关系"></a>调用关系≠异常传播的因果关系</h3><p>文章举了一个例子来说明这个观点：</p><center>   <img src="/imgs/MicroDig/call-casual.png"/>   </center><p>$A \to B \to C$ 的异常次数急剧增加，如果仅仅根据调用关系去分析异常传播，那么根因是$C$，然而，操作员却没有在$C$中发现有意义的故障报告。因为 $B$ 已经用尽了文件描述符，无法建立与 $C$ 的新连接，所以$B \to C$有大量的异常出现。所以根因是$B$不是$C$，这与调用关系的回溯是违背的。文章提到腾讯有35%的性能问题不能仅仅依靠调用关系回溯解决。</p><blockquote><p>所以异常的被调用服务不一定是根因，调用方和被调用方都有可能是根因</p></blockquote><h3 id="异构传播图"><a href="#异构传播图" class="headerlink" title="异构传播图"></a>异构传播图</h3><p>由3.1可知，仅仅从调用关系分析异常传播是不够的，所以本文提出了一种异构传播图（heterogeneous propagation graph）来描述故障传播的因果关系：</p><center>   <img src="/imgs/MicroDig/hpg.png"/>   </center><ul><li><p>如上图所示，$R(A,B)$ 代表$A \to B$的异常率（anomaly rate），$R(A)$ 代表服务$A$ 本身的异常率。注意，服务本身的异常率，如$R(A)$，在这个工作中是不可观测的；边的异常率，如$R(A,B)$，是可以被观测的。</p></li><li><p>因为3.1中展示了调用方和被调用方均可能贡献异常，所以每个服务都应该有一条指向调用边的因果线（比如$R(A) \to R(A,B)$）。</p></li><li><p>文章添加了一些假设：①服务之间是独立的，比如$R(A)$和$R(B)$是独立的【这个假设有点不太符合现实】，②没有交集的两条调用边是独立的，比如$R(A,B)$和$R(C,D)$</p></li></ul><p>根据作者的设计，这里应该就能看到$R(B,C)$是受$R(B)$和$R(C)$影响的了，从某种意义上给3.1的问题提供了思路。</p><h2 id="MicroDig-架构"><a href="#MicroDig-架构" class="headerlink" title="MicroDig 架构"></a>MicroDig 架构</h2><center>   <img src="/imgs/MicroDig/structure.png"/>   </center><p>可以看到MicroDig分为几个部分：</p><ol><li>性能监控 (Monitoring)</li><li>相关调用的识别 (Association Call Identification)</li><li>异构传播图的构建 (Heterogeneous Propagation Graph Construction)</li><li>根因定位 (Root Cause Localization)</li></ol><h3 id="Association-Call-Identification"><a href="#Association-Call-Identification" class="headerlink" title="Association Call Identification"></a>Association Call Identification</h3><p>对于大规模微服务系统，如果直接构造调用图，那么图中会包含大量与故障不相关的调用边。所以需要对边进行筛选。</p><h4 id="构造port-level-异常子图"><a href="#构造port-level-异常子图" class="headerlink" title="构造port-level 异常子图"></a>构造<code>port-level</code> 异常子图</h4><p>文章首先构造 <code>port-level</code> 异常子图，<code>port-level</code>即接口级别，图中的节点都是接口， 具体步骤如下：</p><ol><li>构造 <code>port-level</code> 调用图（为什么选用<code>port-level</code>）</li><li>在调用图上进行 <em>宽度优先搜索</em>，对于被遍历的边，采用<em>3-sigma 异常检测</em> 对边的异常率或者超时率进行检测，将异常边保留下来，就得到<code>port-level</code>异常子图</li></ol><blockquote><p>为什么先构造<code>port-level</code>异常子图，而不是直接构造<code>service-level</code>异常子图？因为一个service包含太多port，聚合后一些异常port的表现可能被其他正常port掩盖。</p></blockquote><h4 id="构造service-level-异常子图"><a href="#构造service-level-异常子图" class="headerlink" title="构造service-level 异常子图"></a>构造<code>service-level</code> 异常子图</h4><p>聚合构造好的<code>port-level</code>异常子图，即把同一个服务的port节点合并为一个service节点，就得到了<code>service-level</code>异常子图。对于服务$S$和$S’$，定义$F(p,p’)$和$N(p,p’)$分别为其中<code>port-level</code>边$p \to p’$的异常调用数和总调用数，那么时间点$t$的$S \to S’$的异常率$R_t(S, S’)$为：</p><p>$$<br>    R_t(S, S’)&#x3D;\frac{\sum_{p\in S, p’ \in S’}F_t(p,p’)}{\sum_{p\in S, p’ \in S’}N_t(p,p’)}<br>$$</p><p>整个过程如图(a) (b)所示 ：</p><center>   <img src="/imgs/MicroDig/hpg-build.png"/>   </center><h4 id="构造-Heterogeneous-Propagation-Graph"><a href="#构造-Heterogeneous-Propagation-Graph" class="headerlink" title="构造 Heterogeneous Propagation Graph"></a>构造 Heterogeneous Propagation Graph</h4><p>3.1 中提到调用关系≠故障传播的因果关系，所以<code>service-level</code>异常子图也不能直接用于根因定位，需要进一步构建Heterogeneous Propagation Graph （HPG）：</p><center>   <img src="/imgs/MicroDig/hpg-algo.png"  width="500"/>   </center><p>原理很简单：</p><ol><li><strong>设置service节点</strong>：把<code>service-level</code>异常子图的所有服务加入到 HPG</li><li><strong>设置call节点</strong>：对于每个服务$S$，将$S$的出边和入边作为节点加入HPG</li><li><strong>call节点和service节点的关系</strong>：对于每个call节点（$S \to S’$），设置 $S \to (S \to S’)$，$(S \to S’) \to S’$</li><li><strong>call节点和call节点的关系</strong>：对于每个服务$S$，设置：出边 $\to$ 入边</li></ol><h3 id="根因服务定位"><a href="#根因服务定位" class="headerlink" title="根因服务定位"></a>根因服务定位</h3><p>异构传播图（HPG）有两种节点（service，call）和两种边（service $\to$ call, call $\to$ call）。本文采取针对异构图的随机游走算法来定位根因：</p><center>   <img src="/imgs/MicroDig/HPG-example.png" width="300"/>   </center><h4 id="转移权重"><a href="#转移权重" class="headerlink" title="转移权重"></a>转移权重</h4><p>随机游走的核心是<strong>定义不同边的游走权重</strong>：</p><ol><li><p>对于call $\to$ call：比如$C_{23} \to C_{12}$，通过计算这两个调用的异常率数组之间的相关系数来决定游走权重。</p></li><li><p>对于service $\to$ call：比如$S_1 \to C_{12}$</p><ul><li><p>首先计算service的异常程度，定义$\mathbb{S}_U$和$\mathbb{S}_D$分别表示服务$S$的上游服务集合和下游服务集合，服务$S$的异常程度$\alpha_S$可以表示为：<br>$$<br> \alpha_S &#x3D; \frac{|{S’|S’\in \mathbb{S}_U \cup \mathbb{S}_D, \theta(S’)&#x3D;1 }|}{|\mathbb{S}_U \cup \mathbb{S}_D|}<br>$$<br>当$S’$有任意一条<code>port-level</code>的边是异常时，$\theta(S’)&#x3D;1$。</p></li><li><p>然后计算service $\to$ call的权重。对于任意一个call节点$C&#x3D;S_{caller} \to S_{callee}$，有两条service $\to$ call类型的边：$S_{caller} \to C$ 和 $C \to S_{callee}$。这两条边的权重分别为：$\omega_{caller}$ 和 $\omega_{callee}$，分别计算如下：<br>$$<br> \omega_{caller}&#x3D;max(0, \Delta \eta)*[0.5+\beta sgn(\Delta \alpha)]<br>$$</p></li></ul><p>$$<br>   \omega_{callee}&#x3D;max(0, \Delta \eta)*[0.5-\beta sgn(\Delta \alpha)]<br>$$<br>其中，$\Delta \alpha &#x3D; \alpha(S_{caller})-\alpha(S_{callee})$，$\Delta \eta$即当前服务的所有入边的权重-所有出边的权重。</p></li></ol><h4 id="异构随机游走"><a href="#异构随机游走" class="headerlink" title="异构随机游走"></a>异构随机游走</h4><p>与<code>Personal pageRank</code>不同的是，作者没有用个性化向量来跳出陷阱，而是在图上加了以下几种边来防止掉入陷阱：</p><ul><li><strong>backward edge</strong>：如果有节点只有一条有向边连接，那么则加一个与有向边方向相反的backward edge，权重是有向边的$\rho$倍。</li><li><strong>self-loop edge</strong>：给每个节点加上自环边</li></ul><p>游走算法如下图所示，与普通的随机游走没有太大差别：</p><center>   <img src="/imgs/MicroDig/random-walk.png" width="500"/>   </center><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>创新点</strong>：这篇文章的创新点不是很突出，随机游走感觉已经玩烂了（如果随机游走上能再精进一下，可能会好一些）。。。但是异构图的构建还是让人耳目一新的</li><li><strong>动机</strong>：动机比较简单，没有实证分析（对腾讯数据的实证分析应该加上的）。</li><li><strong>代码复现</strong>：公布的代码里应该是没有完整数据的，其实除公司以外的测试数据集应该要公开的。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div><a name="GMTA"></a>[1] Guo X, Peng X, Wang H, et al. Graph-based trace analysis for microservice architecture understanding and problem diagnosis, ESEC/FSE. 2020: 1387-1397. <a>https://taoxiease.github.io/publications/esecfse20in-trace.pdf</a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;题目：Diagnosing Performance Issues for Large-Scale  Microservice Systems with Heterogeneous Graph&lt;/p&gt;
&lt;p&gt;来源：TSC 2024&lt;/p&gt;
&lt;p&gt;作者</summary>
      
    
    
    
    <category term="文献精读" scheme="https://shuaiyuxie.github.io/categories/%E6%96%87%E7%8C%AE%E7%B2%BE%E8%AF%BB/"/>
    
    
    <category term="微服务" scheme="https://shuaiyuxie.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="trace" scheme="https://shuaiyuxie.github.io/tags/trace/"/>
    
    <category term="根因定位" scheme="https://shuaiyuxie.github.io/tags/%E6%A0%B9%E5%9B%A0%E5%AE%9A%E4%BD%8D/"/>
    
    <category term="TSC" scheme="https://shuaiyuxie.github.io/tags/TSC/"/>
    
  </entry>
  
  <entry>
    <title>[ICSE 2021] MicroHECL: High-Efficient Root Cause Localization in Large-Scale Microservice Systems</title>
    <link href="https://shuaiyuxie.github.io/2024/05/13/MicoHECL/"/>
    <id>https://shuaiyuxie.github.io/2024/05/13/MicoHECL/</id>
    <published>2024-05-13T02:35:47.000Z</published>
    <updated>2024-11-21T06:44:58.392Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目：MicroHECL: High-Efficient Root Cause Localization in Large-Scale Microservice Systems</p><p>来源：ICSE 2021</p><p>作者：复旦大学CodeWisdom团队，阿里云</p></blockquote><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>微服务系统的可用性问题直接影响了业务的运行，这些问题通常由各种各样的故障类型以及服务间故障的传播造成。如何设计精准且高效定位故障根因的方法成为了一个重大挑战。然而，现有基于服务调用图的方法在<font color=red>异常检测的准确率</font>和<font color=red>图游走的效率</font>上存在不足。本文提出了一种高效的根因定位方法MicroHECL，通过如下步骤定位故障根因：</p><ul><li>动态构建一段时间窗口内的服务调用图</li><li>对不同异常类型进行个性化异常检测</li><li>对不同异常类型分析异常传播链路，通过剪枝提高效率</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工业微服务系统包含大量的微服务（e.g., alibaba有3000个微服务，300个子系统）。一个服务都可能运行在成百上千个容器中，并时常动态创建和销毁。服务之间也存在复杂的调用关系（同步、异步）。</p><p>微服务系统可用性问题可能由不同类型的异常引起，每种异常都由一组<strong>指标</strong>表示。异常可能源自服务并沿服务调用传播，最终导致可用性问题。文章具体关注三种故障类型（就是谷歌提到的几种黄金指标）：</p><ul><li>性能异常（Performance Anomaly）</li><li>可靠性异常（Reliability Anomaly）</li><li>流量异常（Traffic Anomaly）</li></ul><h2 id="MicroHECL-概述"><a href="#MicroHECL-概述" class="headerlink" title="MicroHECL 概述"></a>MicroHECL 概述</h2><center>   <img src="/imgs/MicroHECL/MicroHECL.png"/>   </center><p>MicroHECL支持三种故障类型的检测和诊断：性能异常、可靠性异常和流量异常。最终输出候选的故障根因服务排名。</p><h3 id="服务调用图构建"><a href="#服务调用图构建" class="headerlink" title="服务调用图构建"></a>服务调用图构建</h3><p>当MicroHECL检测到异常后（<code>3-sigma</code>），会启动根因分析流程，首先就是构建过去<em><strong>30min</strong></em>内的服务依赖图（service call graph）。图上的节点就是每一个微服务；图上的边代表服务之间的调用关系，比如$S_i \to S_j$代表微服务$S_i$调用了微服务$S_j$；节点上具有一些属性：响应时间（RT），错误数量（EC）以及每秒请求量（QPS）。</p><h3 id="异常传播链分析"><a href="#异常传播链分析" class="headerlink" title="异常传播链分析"></a>异常传播链分析</h3><p>检测到异常的微服务并不一定是故障根因，但是故障根因一般在这个微服务的上游或者下游。异常传播链分析的目的是<strong>筛选初始异常服务中可能的异常传播链来识别一组候选根本原因服务</strong>。整个过程由以下几步组成：</p><ul><li>分析入口服务（即最初汇报异常的微服务，后面会混用）</li><li>异常传播链扩展</li><li>根因排序</li></ul><h4 id="分析入口服务"><a href="#分析入口服务" class="headerlink" title="分析入口服务"></a>分析入口服务</h4><p>文章首先根据经验定义了三种故障类型的传播方向：</p><center>   <img src="/imgs/MicroHECL/direction.png" width="500"/>   </center><p>性能异常和可靠性异常的传播方向很好理解，因为上游服务的响应时间和状态码受下游服务影响。流量异常的传播方向是从上游到下游，原因是【笔者自己的理解】上游服务发生了故障（比如网络拥塞），那么发送到下游的流量会大幅减少，所以下游服务会出现QPS急剧减少的异常。这个结论也可以在ImpactTracer<a href="#ImpactTracer"><sup>1</sup></a>中找到。</p><center>   <img src="/imgs/MicroHECL/chain.png"/>   </center><p>有了故障的传播方向，文章从<strong>入口服务开始，向邻居节点不断扩展分析</strong>。如图Fig. 2所示，整个过程描述如下：</p><blockquote><ol><li>将入口服务$S_5$纳入异常传播链</li><li>异常检测。检测$S_5$的邻居节点$S_4$和$S_7$的异常类型</li><li>确认$S_4$的异常类型为<strong>Traffic Anomaly</strong>，$S_7$的异常类型为<strong>Performance Anomaly</strong></li><li>检测是否符合传播方向（$S_4$是否是$S_5$的上游，$S_7$是否是$S_5$的下游）</li><li>符合，将$S_4$和$S_7$添加到异常传播链</li><li>从$S_4$和$S_7$出发，对邻居节点重复上述步骤</li></ol></blockquote><p>以上过程其实就是故障的溯源，图中的箭头可以看作故障的传播路径。过程中涉及的异常检测在<a href="#33-%E6%9C%8D%E5%8A%A1%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B">3.3节</a>会提到。</p><h4 id="异常传播链扩展"><a href="#异常传播链扩展" class="headerlink" title="异常传播链扩展"></a>异常传播链扩展</h4><p>过程与3.2.1中描述的扩展过程一致。对于每个检测到的上游&#x2F;下游异常节点，将其添加到异常传播链中。当无法向链中添加更多节点时，异常传播链的扩展结束。比如Fig. 2对于$S_4$方向的传播分析，以$S_1$结束；对于$S_7$方向的传播分析，以$S_9$和$S_{10}$结束。</p><h4 id="候选根因定位"><a href="#候选根因定位" class="headerlink" title="候选根因定位"></a>候选根因定位</h4><p>本文选择异常传播链的末端服务作为候选根因，比如Fig. 2中的候选根因服务为$S_1$，$S_9$和$S_{10}$。那么如何排名呢？</p><ul><li>选取入口服务过去60min的业务指标 $X$</li><li>选取候选根因服务过去60分钟的质量指标（<code>RT</code>, <code>EC</code> or <code>QPS</code>）$Y$</li><li>计算两者之间的皮尔逊相关系数：</li></ul><p>$$<br>   P(X, Y)&#x3D;\frac{\sum_{i&#x3D;1}^n{(X_i-\overline{X})(Y_i-\overline{Y})}}{\sqrt{\sum_{i&#x3D;1}^n{(X_i-\overline{X})^2}\sum_{i&#x3D;1}^n{(Y_i-\overline{Y})^2}}}<br>$$</p><p>皮尔逊相关系数范围为[-1,1]，绝对值越接近1则表明相关性越大。所以，根因则根据皮尔逊相关系数的绝对值来排序。</p><h3 id="服务异常检测"><a href="#服务异常检测" class="headerlink" title="服务异常检测"></a>服务异常检测</h3><p>这篇文章的重点应该是放在了如何设计精准的异常检测上。不同于以往的方法只使用一种异常检测手段，本文对三种故障类型（Performance Anomaly，Reliability Anomaly，Traffic Anomaly）分别设计了异常检测方法。</p><p>这三种方法分别对应三种指标：响应时间（<code>RT</code>），错误数量（<code>EC</code>）以及每秒请求量（<code>QPS</code>），以下是阿里巴巴监控系统中获取的异常案例：</p><center>   <img src="/imgs/MicroHECL/metrics.png"/>   </center><h4 id="性能异常检测"><a href="#性能异常检测" class="headerlink" title="性能异常检测"></a>性能异常检测</h4><p>在<code>RT</code>的异常检测中，需要考虑<code>RT</code>可能存在的周期性（如Fig. 3 (d)）所示，简单的使用3-sigma方法会将这种正常周期波动视为异常。所以不仅需要考虑当前期间的质量指标，还需要考虑<strong>前一天</strong>和<strong>前一周同一天</strong>的质量指标。</p><p>本文使用OC-SVM训练异常检测模型，OC-SVM是一种常用的无监督机器学习模型，常用于异常检测和分类。文章为<code>RT</code>构建了以下4种特征：</p><blockquote><ul><li>当前检测窗口中<code>RT</code>的值大于给定比较时间窗口内<code>RT</code>的最大值的数量。</li><li>当前检测窗口中<code>RT</code>的最大值与给定比较时间窗口内的<code>RT</code>最大值的差值。</li><li>当前检测时间窗口中超过给定比较时间窗口中<code>RT</code>滑动平均值最大值的数量。</li><li>当前检测窗口中<code>RT</code>的平均值与给定时间窗口内<code>RT</code>的滑动平均值的最大值的比值。</li></ul></blockquote><p>其中，当前检测窗口大小为<em><strong>10min</strong></em>，给定比较时间窗口有3种：①过去一小时、②前一天同一小时、③前一周同一天的同一小时。（如果数据保存没那么完善和严格的话，笔者认为定义一段正常时间为比较窗口应该也是可以接受的）。所以一共有3*4&#x3D;12种特征。</p><p>对于模型训练和验证，文章拿10000样本作为训练集，600个正负比例1:1的样本作为测试集。</p><h4 id="可靠性异常检测"><a href="#可靠性异常检测" class="headerlink" title="可靠性异常检测"></a>可靠性异常检测</h4><p>这里提到<code>EC</code>大多时候都是0（Fig.2 (b,c)），偶尔会出现少许波动，但很快会恢复（比如断路器打开时<code>EC</code>升高，关闭后<code>EC</code>降低），也没有周期性，如果用性能异常的模型，则会出现大量误报（少许波动都会算进去）。</p><p>所以，文章采用随机森林（Random Forest，RF）来分类，文章为<code>EC</code>构建了以下5种特征：</p><blockquote><ul><li>计算最近一小时的<code>EC</code>和前一天同一时间段的<code>EC</code>的增量；使用3-Sigma规则识别当前检测窗口中可能存在的增量异常值；如果存在，则返回异常值的平均值作为特征值，否则返回0。</li><li>计算最近一小时内<code>EC</code>值和每一个值的前一分钟<code>EC</code>值的增量；使用3-Sigma规则识别当前检测窗口中可能存在的增量异常值；如果存在，则返回异常值的平均值作为特征值，否则返回0。</li><li>检测窗口内的平均<code>RT</code>是否大于设定的阈值（例如，在本文的线上系统中，阈值设置为50ms）</li><li>检测窗口内最大错误率（<code>EC</code>&#x2F;sum(<code>QPS</code>)）。</li><li>检测窗口内<code>RT</code>和<code>EC</code>的皮尔逊相关系数</li></ul></blockquote><p>其中，当前检测窗口大小为<em><strong>10min</strong></em>，对于模型训练和验证，文章拿1000样本作为训练集（有标签，正负比1:3），400个正负比例5:3的样本作为测试集。</p><h4 id="流量异常检测"><a href="#流量异常检测" class="headerlink" title="流量异常检测"></a>流量异常检测</h4><p><code>QPS</code>大多满足正态分布（Fig.2 (c,f)），所以直接采用3-sigma进行检测。</p><blockquote><p>这里笔者有小小的疑问，QPS真的满足正态分布吗？在系统那边的文章，许多流量都是以泊松分布注入的</p></blockquote><p>其中，当前检测窗口大小为<em><strong>10min</strong></em>，选择过去<em><strong>1h</strong></em>计算均值和标准差。3-sigma的均值和方差选择。为了进一步消除误报，还需要检测初始异常服务的<code>QPS</code>和业务指标（就是入口服务被异常检测的指标）的皮尔逊系数，如果大于0.9，则报告流量异常。</p><h4 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h4><p>为了提高MicroHECL的异常回溯效率，需要控制指数增长的异常传播链分支数量，因为不断地进行异常检测也是非常耗时的。</p><p>核心思想：<font color='red'>异常传播链中的两个连续服务调用的相应质量指标应该具有相似变化趋势</font></p><blockquote><p>例子：Fig. 2中的 $S_1 \to S_4$ 和 $S_4 \to S_5$ 都是<strong>Traffic Anomaly</strong> 的传播路径，如果$S_1 \to S_4$ 的 <code>QPS</code> 和 $S_4 \to S_5$ 的 <code>QPS</code> 没有相似的趋势（即皮尔逊相关系数&lt;0.7），则需要剪掉$S_1 \to S_4$，那么$S_4$就取代$S_1$变成了候选根因。</p></blockquote><p>这里的检测窗口选取的过去<em><strong>60min</strong></em>。剪枝操作执行在异常节点加入异常调用链之前。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>文章思路挺好的，有理有据，方法朴实有效。写作的顺序不是传统的总分形式，首先就把整体流程讲完了，然后拿出异常检测和剪枝单独讲，初看有点不适应。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div><a name="ImpactTracer"></a>[1] Xie R, Yang J, Li J, et al. ImpactTracer: Root Cause Localization in Microservices Based on Fault Propagation Modeling, (DATE), 2023. <a>https://ieeexplore.ieee.org/abstract/document/10137078/</a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;题目：MicroHECL: High-Efficient Root Cause Localization in Large-Scale Microservice Systems&lt;/p&gt;
&lt;p&gt;来源：ICSE 2021&lt;/p&gt;
&lt;p&gt;作者：复旦大学C</summary>
      
    
    
    
    <category term="文献精读" scheme="https://shuaiyuxie.github.io/categories/%E6%96%87%E7%8C%AE%E7%B2%BE%E8%AF%BB/"/>
    
    
    <category term="微服务" scheme="https://shuaiyuxie.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="trace" scheme="https://shuaiyuxie.github.io/tags/trace/"/>
    
    <category term="根因定位" scheme="https://shuaiyuxie.github.io/tags/%E6%A0%B9%E5%9B%A0%E5%AE%9A%E4%BD%8D/"/>
    
    <category term="ICSE" scheme="https://shuaiyuxie.github.io/tags/ICSE/"/>
    
  </entry>
  
  <entry>
    <title>[SoCC 2021] Characterizing Microservice Dependency and Performance: Alibaba Trace Analysis</title>
    <link href="https://shuaiyuxie.github.io/2024/05/08/alibaba-traces-socc-2021/"/>
    <id>https://shuaiyuxie.github.io/2024/05/08/alibaba-traces-socc-2021/</id>
    <published>2024-05-08T03:28:33.000Z</published>
    <updated>2024-11-21T06:46:41.678Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目：Characterizing Microservice Dependency and Performance: Alibaba Trace Analysis</p><p>来源：SoCC 2021</p><p>作者：中国科学院深圳先进技术研究院, 阿里巴巴</p></blockquote><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>现在有大量针对微服务架构的研究，比如资源管理、弹性伸缩以及故障诊断等。但是目前仍缺乏针对生产环境中微服务特性的实证研究。这篇文章对阿里巴巴公布的trace数据集<a href="#alibabaTrace"><sup>1</sup></a>进行了详细的实证分析，从以下角度揭示了<strong>生产环境</strong>下微服务系统的特点：</p><ul><li>微服务调用图的特点，与传统作业DAG的不同</li><li>无状态微服务之间的依赖关系</li><li>微服务系统的运行时性能受哪些因素的影响</li></ul><p>此外，现有的微服务benchmark也存在一些问题，如：</p><ul><li><b>规模太小</b>。经典的benchmark（如DeathStarBench<a href="#DeathStarBench"><sup>2</sup></a>），只包含数个微服务（不超过40）。在这些小规模的微服务benchmark上得到的结论不一定能推广到生产环境中；</li><li><b>静态依赖</b>。这些benchmark的依赖关系都是静态的，无法模拟生产环境中常见的动态性。</li></ul><p>所以这篇文章还基于阿里巴巴的trace数据构建了一个仿真的数学模型，模拟大规模动态微服务系统。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>这里首先介绍了微服务架构的调用图，以及图中常见的组件：</p><center><img src="/imgs/alibaba-traces-socc-2021/microservice.jpg"/></center><p>这里引入了几个关键术语：</p><ul><li><em><strong>Entering Microservice</strong></em>：入口微服务，即请求进入微服务系统的入口。通常是前端微服务。</li><li><em><strong>UM, DM</strong></em>：分别指代一条调用链路的上游微服务（upstream microservice）和下游微服务（downstream microservice）。</li></ul><p>对于微服务种类，文章基于服务提供的功能将微服务划分为有状态微服务（stateful）和无状态微服务（stateless）。</p><ul><li><em><strong>stateful微服务</strong></em>：通常存储有一些状态数据，常见的有数据库（database）和缓存（memCached），它们大多的接口大多分为两类：reading 和 writing。</li><li><em><strong>stateless微服务</strong></em>：不存储状态数据，所以可以轻松的伸缩，它们通常提供成百上千个不同接口，用于完成不同的业务功能。</li></ul><p>对于微服务交互种类，文章基于交互协议划分了三种类别：</p><ul><li><em><strong>IP</strong></em>：进程间通信（Inter Process communication），常发生在stateless微服务和stateful微服务之间。</li><li><em><strong>RPC</strong></em>：远程过程调用（Remote Procedure Call），一种双向通信，DM必须返回给UM结果。</li><li><em><strong>MQ</strong></em>：消息队列（Message Queue），一种单向通信，UM发送消息到第三方中间件（消息队列），消息队列储存这个消息，直到DM主动取出这个消息。</li></ul><p>一般来说，RPC效率高，MQ更加灵活。</p><p>此外，还介绍了两个概念：调用深度（call depth）和响应延迟（RT）。</p><ul><li><em><strong>call depth</strong></em>：调用深度指调用图中最长的路径长度，比如Figure 1中的调用图长度为5。</li><li><em><strong>RT</strong></em>：从UM发出请求到UM收到回复的时长。即使同一种接口的请求也会因为参数、状态的不同产生差距较大的延时。</li></ul><h3 id="Alibaba-Trace"><a href="#Alibaba-Trace" class="headerlink" title="Alibaba Trace"></a>Alibaba Trace</h3><p>alibaba的trace与常见的trace数据模型不同<a href="#OpenTracing"><sup>3</sup></a>，因为它更像一种多模态监控数据，包含了<strong>节点信息</strong>、<strong>指标</strong>以及<strong>调用链</strong>等。具体信息如下：</p><center><img src="/imgs/alibaba-traces-socc-2021/alibaba-trace.jpg" width = "500"/></center><ol><li><p><em><strong>物理运行环境</strong></em>：阿里巴巴的集群采用K8s进行管理，整个集群运行在裸机云（bare-metal cloud）上，服务与作业通常混合部署在一起以提高资源利用率。Figure 2 (a) 介绍了云上两种常见的运行方式：</p><ol><li>Online Services：比如微服务，运行在容器中，直接由K8s管理，有持续向外界提供服务的能力。（<u>stateful微服务一般部署在特定集群中，不参与混合部署</u>）</li><li>Offline Jobs：这些作业一般都需要执行特定的任务，需要K8s事先为它们分配资源，然后调度到特定的机器上执行。</li></ol></li><li><p><em><strong>微服务系统指标</strong></em>：这个大概分为三个部分：硬件层（缓存命中率）、操作系统层（CPU利用率）、应用层（JVM垃圾回收），具体内容如Figure 2 （b）。</p></li><li><p><em><strong>微服务调用链</strong></em>：如Figure 2 (c)所示，大体上与OpenTracing的数据模型类似，但是摒弃了<code>spanID</code>和<code>parentSpanId</code>，只留下UM和DM的信息，并用<code>rpcId</code>来唯一标识一个trace内的不同调用，<code>Communication Paradigm</code>代表调用类型（又名<code>rpctype</code>，如rpc）。</p><center><img src="/imgs/alibaba-traces-socc-2021/trace-demo.jpg" width = "300"/></center></li><li><p><em><strong>聚合调用</strong></em>：如Figure 2 (d)所示，本质上是对单个微服务的调用信息进行聚合和统计。</p></li></ol><h2 id="调用图的剖析"><a href="#调用图的剖析" class="headerlink" title="调用图的剖析"></a>调用图的剖析</h2><p>这一块内容很多，我只提炼出较为有意义的部分。<font color=red>这里的调用图（call graph）并不是指整个微服务依赖图，应该指的是单个trace的拓扑图</font>。</p><h3 id="微服务调用图特征"><a href="#微服务调用图特征" class="headerlink" title="微服务调用图特征"></a>微服务调用图特征</h3><p>作者在这里总结了三个特征，对下游任务非常有启发：</p><ol><li><p><em>调用图的微服务数量呈现长尾分布</em></p><center><img src='/imgs/alibaba-traces-socc-2021/service-num-heavy-distribution.png'/></center></li></ol><blockquote><p><strong>现有的benchmark太小了</strong>：10%的调用图的微服务数量&gt;40，存在微服务数量&gt;100的调用图。<br><strong>大量的Memcacheds</strong>：大规模的调用图中有一半的微服务都是Memcacheds，可能是为了减少RT。</p></blockquote><ol start="2"><li><p><em>调用图是一棵树，并且很多图是一条长链路</em></p><center><img src='/imgs/alibaba-traces-socc-2021/depth-svcnum.png'/></center><center><img src='/imgs/alibaba-traces-socc-2021/heat.png'/></center></li></ol><blockquote><p><strong>较短的深度</strong>：一半的调用图深度在2~4 （a）<br><strong>树有点胖</strong>：，深度随着微服务数量增加没有明显变化 （b），说明调用图是宽且浅的？很多下游微服务只是简单的查询数据（stateful微服务一般是叶子节点）<br><strong>较深的图一般都是长链路</strong>：深度增加，但是后面的的微服务数量大多为1个，说明这棵树的宽度基本集中在第2层，后面的都是一条长链路</p><p>有些下游任务（弹性伸缩）会对调用图进行编码，作者特别提到有些图有很长的深度，会让这些任务产生很大的模型以及过拟合。我觉得这没有直接关系，这些数量远远达不到图网络的极限。而且这个实验也可以反过来说，大部分图深度都是很短的。</p></blockquote><ol start="3"><li><p><em>许多stateless微服务是热点</em></p><center> <img src='/imgs/alibaba-traces-socc-2021/degree.png' width='500'/></center></li></ol><blockquote><p><strong>存在高入度微服务</strong>：有5%的stateless微服务入度&gt;16，这些微服务在90%的调用图存在，处理了95%的请求。这些服务很大概率是瓶颈，可以用来指导弹性伸缩。</p></blockquote><ol start="4"><li><em>微服务调用图大多是动态的</em></li></ol><center>    <img src='/imgs/alibaba-traces-socc-2021/clusters.png' width='500'/></center><blockquote><p>这个动态和其他文章提到的动态不一样，文中的动态性指的是请求同一个服务的接口，如果参数不一样，会产生不同的拓扑链路（Figure 6）；其他文章提到的是微服务系统始终在动态变化。</p></blockquote><h3 id="微服务调用关系特征"><a href="#微服务调用关系特征" class="headerlink" title="微服务调用关系特征"></a>微服务调用关系特征</h3><ol><li><p><em>不同层之间调用类型差别大</em></p><center> <img src='/imgs/alibaba-traces-socc-2021/dist-invo-type.png' width='500'/></center></li></ol><p>首先考虑微服务是否DM，大致分为以下几类：① <code>black holes</code>（没有DM），②<code>relay</code>（必须有DM），③<code>normal</code>（一定概率有DM）</p><p>IP(S2D)，IP(S2M)，IP(S2) 表示IP通信的双方分别为：stateless 微服务与database，stateless 微服务与Memcacheds，stateless微服务与stateless微服务</p><blockquote><p>深度增加，black holes比例增加，relay比例减少，normal中对应部分也是如此。</p><p>深度增加，IP(S2M) 比例先增后减，IP(S2D)在升高，表明缓存命中率在下降，转而去查询数据库。MQ比例增加，说明业务链路较深时（业务复杂），倾向于使用MQ来减少RT</p></blockquote><h2 id="微服务之间的依赖"><a href="#微服务之间的依赖" class="headerlink" title="微服务之间的依赖"></a>微服务之间的依赖</h2><p>这一章节对如何设计和优化微服务架构有启发，不是我研究的范畴，暂时略过</p><h3 id="并行依赖"><a href="#并行依赖" class="headerlink" title="并行依赖"></a>并行依赖</h3><center>    <img src='/imgs/alibaba-traces-socc-2021/parallel.png' width='500'/>   </center><blockquote><p><strong>并行依赖很少</strong>：数据集中大部分的微服务都很少被并行调用，这个并行给我的感觉就是异步调用</p></blockquote><h2 id="微服务的运行时性能"><a href="#微服务的运行时性能" class="headerlink" title="微服务的运行时性能"></a>微服务的运行时性能</h2><p>这个章节很重要，对资源管理有很大的指导作用。首先介绍一个定义：MCR代表微服务调用速率，我的理解是服务承受的负载</p><h3 id="MCR对资源的影响"><a href="#MCR对资源的影响" class="headerlink" title="MCR对资源的影响"></a>MCR对资源的影响</h3><ol><li><em>MCR与CPU利用率和Young GC强相关，但与Memory利用率相关性弱</em><center> <img src='/imgs/alibaba-traces-socc-2021/resource-mcr.png' width='500'/></center></li></ol><blockquote><p><strong>与CPU利用率，Young GC强相关</strong>：Young GC指的是对JVM堆内存中的新生代区域进行垃圾回收<a href="#YoungGC"><sup>4</sup></a>，Young GC频繁会造成性能下降或者应用stop，可能是因为内存泄漏等原因。<br><strong>与内存，Old GC相关性弱</strong>：alibaba trace中容器的内存一般都很稳定，Old GC频率可能也是如此（老年代本身垃圾回收就不频繁），所以在实验中不是很明显（受限于数据集特征）。</p></blockquote><ol start="2"><li><em>资源对响应时间的影响</em><div> <img src='/imgs/alibaba-traces-socc-2021/resource-RT.png' width='300'/> <img src='/imgs/alibaba-traces-socc-2021/RT-mcr.png' width='300'/></div></li></ol><p>图中的延时选的是P75延时</p><blockquote><p><strong>与CPU利用率强相关</strong>：随着CPU利用率升高，RT明显升高，但RT对内存反应不是很明显（可能是因为缺乏高内存数据）<br><strong>与容器的MCR不太相关</strong>：Alibaba trace中即使MCR很高了，CPU利用率可能还低于10%，所以RT变化不大，<em>说明资源浪费很严重</em></p></blockquote><h2 id="随机图模型"><a href="#随机图模型" class="headerlink" title="随机图模型"></a>随机图模型</h2><center>    <img src='/imgs/alibaba-traces-socc-2021/graph-generator.png' width='300'/>   </center><p>这里简单讲一下，代码实现应该不难：</p><ol><li>准备一个存储stateless服务的队列$Q$，并放入Entering Microservice</li><li>执行循环，直到$Q$为空<ol><li>$Q$弹出一个服务作为UM</li><li>如果UM的类型是<code>Relay</code>或者<code>normal (Relay)</code>，则根据数据集中DM服务类型的分布，生成对应类型的服务数量</li><li>为生成的DMs中不同服务类型确定<code>communication paradigm</code></li><li>将生成的DMs中stateless的微服务放入$Q$</li></ol></li><li>图优化<ol><li>遍历生成的图的每一层<ol><li>随机选择两个父项，如果他们共享相同的标签，则合并他们的两个孩子。</li><li>合并的节点将连接到两个父节点</li></ol></li></ol></li></ol><blockquote><p>暂时还没有看到随机模型被其他论文使用，可能是因为大家都可以自己搭建环境生产数据吧，也可能是因为alibaba trace够用了</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div><a name="alibabaTrace"></a>[1] <a>https://github.com/alibaba/clusterdata</a></div><div><a name="DeathStarBench"></a>[2] Yu Gan. An Open-Source Benchmark Suite for Microservices and Their Hardware-Software Implications for Cloud & Edge Systems. ASPLOS, 2019. <a>https://github.com/delimitrou/DeathStarBench</a></div><div><a name="OpenTracing"></a>[3] OpenTracing, “Opentracing,” <a>https://opentracing.io/specification</a></div><div><a name="YoungGC"></a>[4] java 六 Young GC 和 Full GC <a>https://www.cnblogs.com/klvchen/articles/11758324.html</a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;题目：Characterizing Microservice Dependency and Performance: Alibaba Trace Analysis&lt;/p&gt;
&lt;p&gt;来源：SoCC 2021&lt;/p&gt;
&lt;p&gt;作者：中国科学院深圳先进技术研</summary>
      
    
    
    
    <category term="文献精读" scheme="https://shuaiyuxie.github.io/categories/%E6%96%87%E7%8C%AE%E7%B2%BE%E8%AF%BB/"/>
    
    
    <category term="微服务" scheme="https://shuaiyuxie.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="trace" scheme="https://shuaiyuxie.github.io/tags/trace/"/>
    
    <category term="实证分析" scheme="https://shuaiyuxie.github.io/tags/%E5%AE%9E%E8%AF%81%E5%88%86%E6%9E%90/"/>
    
    <category term="SoCC" scheme="https://shuaiyuxie.github.io/tags/SoCC/"/>
    
  </entry>
  
</feed>
